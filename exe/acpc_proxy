#!/usr/bin/env ruby

require 'acpc_table_manager'
require 'json'
require 'optparse'

ARGV << '-h' if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on("-i", "--id ID", "This proxie's ID. Used as its messaging channel name.") do |c|
    options[:id] = c
  end
  opts.on("-s", "--seat SEAT", "This proxie's seat at the table (zero indexed).") do |c|
    options[:seat] = c.to_i
  end
  opts.on("-t", "--config TABLE MANAGER CONFIG", "Table manager configuration file.") do |c|
    options[:table_manager_config] = File.expand_path c, Dir.pwd
  end
  opts.on("-p", "--port PORT", "The dealer port on which to connect.") do |c|
    options[:port] = c.to_i
  end
  opts.on("-g", "--game GAME DEF KEY", "The game to be played.") do |c|
    options[:game] = c.to_i
  end
end.parse!

raise OptionParser::MissingArgument.new('ID') unless options[:id]
raise OptionParser::MissingArgument.new('SEAT') unless options[:seat]
raise OptionParser::MissingArgument.new('PORT') unless options[:port]
raise OptionParser::MissingArgument.new('TABLE MANAGER CONFIG') unless options[:table_manager_config]
raise OptionParser::MissingArgument.new('GAME DEF KEY') unless options[:game]

raise OptionParser::ArgumentError.new("#{options[:table_manager_config]} doesn't exist.") unless File.exist?(options[:table_manager_config])
raise OptionParser::ArgumentError.new("SEAT must be non-negative, received #{options[:seat] } instead.") unless options[:seat] >= 0

CONFIG_FILE = options[:table_manager_config]

AcpcTableManager.load! CONFIG_FILE

game_info = AcpcTableManager.exhibition_config.games[options[:game]]
unless game_info
  raise OptionParser::ArgumentError.new(
    "\"#{options[:game]}\" is not a recognized game. Registered games: #{AcpcTableManager.exhibition_config.games}."
  )
end

Signal.trap("INT") { exit }
Signal.trap("TERM") { exit }

must_send_ready = !AcpcTableManager.config.next_hand_request_code.nil?

require_relative 'simple_logging'
using AcpcTableManager::SimpleLogging::MessageFormatting
@logger = AcpcTableManager.new_log File.join('proxies', "#{options[:id]}.log")

include AcpcTableManager::ProxyUtils

@sending_channel = "#{options[:id]}-from-proxy"
@receiving_channel = "#{options[:id]}-to-proxy"

last_message_received = Time.now

begin
  log __method__, options: options, must_send_ready: must_send_ready

  proxy = start_proxy(
    options[:id],
    game_info,
    options[:seat],
    port,
    must_send_ready
  ) do |patt|
    AcpcTableManager.redis.publish @sending_channel, to_json(patt)
  end

  loop do
    AcpcTableManager.redis.subscribe_with_timeout(
      AcpcTableManager.config.maintenance_interval_s,
      @receiving_channel
    ) do |on|
      on.message do |channel, message|
      data = JSON.parse message

      log __method__, data: data

      action = data[AcpcTableManager.config.action_key]
      if action == AcpcTableManager.config.next_hand_request_code
        proxy.next_hand!

        log(
          __method__,
          users_turn_to_act?: proxy.users_turn_to_act?,
          match_ended?: proxy.match_ended?
        )
      else
        log __method__, users_turn_to_act?: proxy.users_turn_to_act?,
                        action: action

        if proxy.users_turn_to_act?
          action = PokerAction.new(action) unless action.is_a?(PokerAction)
          proxy.play!(action) do |patt|
            AcpcTableManager.redis.publish @sending_channel, to_json(patt)
          end

          log(
            __method__,
            users_turn_to_act?: proxy.users_turn_to_act?,
            match_ended?: proxy.match_ended?
          )
        end
      end
      last_message_received = Time.now
    end
    exit if proxy.match_ended?(game_info['num_hands_per_match'])
  end
  if proxy.match_ended? game_info['num_hands_per_match']
    exit
  elsif !proxy.users_turn_to_act?
    last_message_received = Time.now
  elsif (
    AcpcTableManager.config.proxy_timeout_s && (
      Time.now > (
        last_message_received + AcpcTableManager.config.proxy_timeout_s
      )
    )
  )
    if AcpcTableManager.config.on_proxy_timeout == 'fold'
      play_check_fold! proxy
    else
      exit
    end
  end
rescue => e
  log(
    __method__,
    {
      match_id: options[:match_id],
      message: e.message,
      backtrace: e.backtrace
    },
    Logger::Severity::ERROR
  )
  AcpcTableManager.notify e # Send an email notification
end
