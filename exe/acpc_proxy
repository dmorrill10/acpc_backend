#!/usr/bin/env ruby

require 'acpc_table_manager'
require 'json'
require 'optparse'

include AcpcTableManager::SimpleLogging

ARGV << '-h' if ARGV.empty?

options = {}
OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} [options]"

  opts.on_tail("-h", "--help", "Show this message") do
    puts opts
    exit
  end

  opts.on("-i", "--id ID", "This proxie's ID. Used as its messaging channel name.") do |c|
    options[:id] = c
  end
  opts.on("-s", "--seat SEAT", "This proxie's seat at the table (zero indexed).") do |c|
    options[:seat] = c.to_i
  end
  opts.on("-t", "--config TABLE MANAGER CONFIG", "Table manager configuration file.") do |c|
    options[:table_manager_config] = File.expand_path c, Dir.pwd
  end
  opts.on("-p", "--port PORT", "The dealer port on which to connect.") do |c|
    options[:port] = c.to_i
  end
  opts.on("-g", "--game GAME DEF KEY", "The game to be played.") do |c|
    options[:game] = c
  end
end.parse!

raise OptionParser::MissingArgument.new('ID') unless options[:id]
raise OptionParser::MissingArgument.new('SEAT') unless options[:seat]
raise OptionParser::MissingArgument.new('PORT') unless options[:port]
raise OptionParser::MissingArgument.new('TABLE MANAGER CONFIG') unless options[:table_manager_config]
raise OptionParser::MissingArgument.new('GAME DEF KEY') unless options[:game]

raise OptionParser::ArgumentError.new("#{options[:table_manager_config]} doesn't exist.") unless File.exist?(options[:table_manager_config])
raise OptionParser::ArgumentError.new("SEAT must be non-negative, received #{options[:seat] } instead.") unless options[:seat] >= 0

CONFIG_FILE = options[:table_manager_config]

AcpcTableManager.load! CONFIG_FILE

game_info = AcpcTableManager.exhibition_config.games[options[:game]]
unless game_info
  raise OptionParser::ArgumentError.new(
    "\"#{options[:game]}\" is not a recognized game. Registered games: #{AcpcTableManager.exhibition_config.games.keys}."
  )
end

Signal.trap("INT") { exit }
Signal.trap("TERM") { exit }

must_send_ready = !AcpcTableManager.config.next_hand_request_code.nil?

@logger = AcpcTableManager.new_log File.join('proxies', "#{options[:id]}.log")

include AcpcTableManager::ProxyUtils

@communicator = AcpcTableManager::ProxyCommunicator.new(options[:id])

last_message_received = Time.now

begin
  log __method__, options: options, must_send_ready: must_send_ready

  proxy = start_proxy(
    game_info,
    options[:seat],
    options[:port],
    must_send_ready
  ) do |patt|
    @communicator.publish(
      AcpcTableManager::ProxyUtils.proxy_to_json(patt)
    )
  end

  loop do
    @communicator.subscribe_with_timeout do |on|
      on.message do |channel, message|
        data = JSON.parse message

        log __method__, data: data

        if data['resend']
          @communicator.publish(
            SENDING_CHANNEL,
            AcpcTableManager::ProxyUtils.proxy_to_json(proxy)
          )
        else
          action = data[AcpcTableManager.config.action_key]
          if action == AcpcTableManager.config.next_hand_request_code
            proxy.next_hand! do |patt|
              @communicator.publish(
                AcpcTableManager::ProxyUtils.proxy_to_json(patt)
              )
            end

            log(
              __method__,
              users_turn_to_act?: proxy.users_turn_to_act?,
              match_ended?: proxy.match_ended?
            )
          else
            log __method__, users_turn_to_act?: proxy.users_turn_to_act?,
                            action: action

            if proxy.users_turn_to_act?
              action = PokerAction.new(action) unless action.is_a?(PokerAction)
              proxy.play!(action) do |patt|
                @communicator.publish(
                  AcpcTableManager::ProxyUtils.proxy_to_json(patt)
                )
              end

              log(
                __method__,
                users_turn_to_act?: proxy.users_turn_to_act?,
                match_ended?: proxy.match_ended?
              )
            end
          end
        end
        exit if proxy.match_ended?(game_info['num_hands_per_match'])
        last_message_received = Time.now
      end
    end
    if proxy.match_ended? game_info['num_hands_per_match']
      exit
    elsif !proxy.users_turn_to_act?
      last_message_received = Time.now
    elsif (
      AcpcTableManager.config.proxy_timeout_s && (
        Time.now > (
          last_message_received + AcpcTableManager.config.proxy_timeout_s
        )
      )
    )
      if AcpcTableManager.config.on_proxy_timeout == 'fold'
        play_check_fold! proxy
      else
        exit
      end
    end
  end
rescue => e
  log(
    __method__,
    {
      id: options[:id],
      message: e.message,
      backtrace: e.backtrace
    },
    Logger::Severity::ERROR
  )
  AcpcTableManager.notify e # Send an email notification
end
